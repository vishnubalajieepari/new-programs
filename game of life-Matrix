int livecells(vector<vector<int>>&ve,int i,int j,int m,int n)//function for counting live cells
    {
        int c=0;
        //traversing down, up, left, right of the matrix for live cells
        if(i-1>=0 && ve[i-1][j]==1)
        {
            c++;
        }
        if(i+1<m && ve[i+1][j]==1)
        {
            c++;
        }
        if(j-1>=0 && ve[i][j-1]==1)
        {
            c++;
        }
        if(j+1<n && ve[i][j+1]==1)
        {
            c++;
        }
        //traversing diagonals to count the live cells
        if(i-1>=0 && j-1>=0 && ve[i-1][j-1]==1)
        {
            c++;
        }
        if(i+1<m && j-1>=0 && ve[i+1][j-1]==1)
        {
            c++;
        }
        if(i+1<m && j+1<n && ve[i+1][j+1]==1)
        {
            c++;
        }
        if(i-1>=0 && j+1<n && ve[i-1][j+1]==1)
        {
            c++;
        }
        return c;
    }
    void gameOfLife(vector<vector<int>>& boa) {
        int m=boa.size();
        int n=boa[0].size();
        vector<vector<int>>ve(boa);
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                int count=livecells(ve,i,j,m,n);//function for counting live cells in the matrix
                if(count<2)
                    boa[i][j]=0;
                else if((count==2 || count==3) && boa[i][j]==1)
                    boa[i][j]=1;
                else if(count>3)
                    boa[i][j]=0;
                else if(count==3 && boa[i][j]==0)
                    boa[i][j]=1;
            }
        }
    }
